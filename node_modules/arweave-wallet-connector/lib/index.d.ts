import Connector from './browser/Connector.js';
export type { AppInfo } from './types';
export declare const ArweaveWebWallet: {
    new (...args: any[]): {
        namespaces: {
            arweaveWallet: {
                walletName: string;
                connect: () => any;
                disconnect: () => any;
                getActiveAddress: () => string | undefined;
                getActivePublicKey: () => Promise<string>;
                getAllAddresses: () => never;
                getWalletNames: () => never;
                sign: (tx: import("arweave/web/lib/transaction").default, options?: any) => Promise<import("arweave/web/lib/transaction").default>;
                dispatch: (tx: import("arweave/web/lib/transaction").default, options?: any) => Promise<{
                    id?: string | undefined;
                    type?: "BASE" | "BUNDLED" | undefined;
                }>;
                encrypt: () => never;
                decrypt: (data: Uint8Array, options: any) => Promise<Uint8Array>;
                getPermissions: () => string[];
                getArweaveConfig: () => Promise<Omit<import("arweave/web/lib/api").ApiConfig, "logger"> & {
                    logger?: any;
                }>;
            };
        };
        postMessage(method: string, params?: any[] | undefined, options?: import("./types").PostMessageOptions | undefined): any;
        getPublicKey(): Promise<string>;
        getArweaveConfig(): Promise<Omit<import("arweave/web/lib/api").ApiConfig, "logger"> & {
            logger?: any;
        }>;
        signTransaction(tx: import("arweave/web/lib/transaction").default, options?: object | import("./types").Null): Promise<import("arweave/web/lib/transaction").default>;
        dispatch(tx: import("arweave/web/lib/transaction").default, options?: object | import("./types").Null): Promise<{
            id?: string | undefined;
            type?: "BASE" | "BUNDLED" | undefined;
        }>;
        decrypt<T extends ArrayBufferView>(message: T, options: AlgorithmIdentifier | import("./types").Override<RsaOaepParams, {
            label?: string | undefined;
        }>): Promise<T>;
        address?: string | undefined;
        connect(): any;
        disconnect(): any;
    };
} & typeof Connector;
